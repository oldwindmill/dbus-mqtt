#!/usr/bin/env python
# -*- coding: utf-8 -*-
import gobject
import logging
import os
import requests
import subprocess
import sys
import traceback


AppDir = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(1, os.path.join(AppDir, 'ext', 'velib_python'))
from ve_utils import exit_on_error


VrmApiServer = 'https://ccgxlogging.victronenergy.com'
CaBundlePath = os.path.join(AppDir, 'venus-ca.crt')
VrmBroker = 'mqtt.victronenergy.com'
SettingsPath = os.environ.get('DBUS_MQTT_PATH') or '/data/conf/mosquitto.d'
BridgeCodesPath = os.path.join(SettingsPath, 'bridge_codes')
BridgeConfigPath = os.path.join(SettingsPath, 'vrm_bridge.conf')
BridgeSettings = '''# Generated by dbus-mqtt v{4}
connection vrm
address {3}:8883
cleansession true
topic N/{0}/# out
topic R/{0}/# in
topic W/{0}/# in
remote_clientid {2}
remote_username ccgxapikey_{0}
remote_password {1}
bridge_cafile {5}
'''


class VrmRegistrator(object):
	def __init__(self, system_id, software_version):
		self._init_broker_timer = None
		self._client_id = None
		self._system_id = system_id
		self._software_version = software_version

	def register(self):
		if self._init_broker_timer != None:
			return
		if self._init_broker():
			self._init_broker_timer = gobject.timeout_add_seconds(60, exit_on_error, self._init_broker)

	@property
	def client_id(self):
		return self._client_id

	def _init_broker(self):
		try:
			restart_broker = False
			password = None
			orig_config = None
			# Read the current config file (if present)
			try:
				logging.info('[InitBroker] Reading config file')
				with open(BridgeConfigPath, 'rt') as in_file:
					orig_config = in_file.read()
				settings = dict(tuple(l.strip().split(' ', 1)) for l in orig_config.split('\n') if not l.startswith('#') and l.strip() != '')
				self._client_id = settings.get('remote_clientid')
				password = settings.get('remote_password')
			except IOError:
				logging.info('[InitBroker] Reading config file failed.')
			# Fix items missing from config
			if self._client_id == None:
				self._client_id = 'ccgx_' + get_random_string(12)
			if password == None:
				password = get_random_string(32)
			config = BridgeSettings.format(self._system_id, password, self._client_id, VrmBroker, 
				self._software_version, CaBundlePath)
			# Do we need to adjust the settings?
			if config != orig_config:
				logging.info('[InitBroker] Writing new config file')
				config_dir = os.path.dirname(BridgeConfigPath)
				if not os.path.exists(config_dir):
					os.makedirs(config_dir)
				with open(BridgeConfigPath, 'wt') as out_file:
					out_file.write(config)
				restart_broker = True
			# Get to the actual registration
			logging.info('[InitBroker] Registering CCGX at VRM portal')
			with requests.Session() as session:
				headers = {'content-type': 'application/x-www-form-urlencoded', 'User-Agent': 'dbus-mqtt'}
				identifier = 'ccgxapikey_' + self._system_id
				r = session.post(
					VrmApiServer + '/log/storemqttpassword.php',
					data=dict(identifier=identifier, mqttPassword=password),
					headers=headers,
					verify=CaBundlePath)
				if r.status_code == requests.codes.ok:
					if restart_broker:
						self._restart_broker()
					self._init_broker_timer = None
					return False
				logging.error('VRM registration failed. Http status was: {}'.format(r.status_code))
				logging.error('Message was: {}'.format(r.text))
		except:
			traceback.print_exc()
		# Notify the timer we want to be called again
		return True

	def _restart_broker(self):
		logging.info('Restarting broker')
		subprocess.call(['svc', '-t', '/service/mosquitto'])
